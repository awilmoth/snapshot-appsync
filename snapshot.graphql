type Alias {
    address: String!
    alias: String!
    created: Int!
    id: String!
    ipfs: String
}

input AliasWhere {
    address: String
    address_in: [String]
    alias: String
    alias_in: [String]
    created: Int
    created_gt: Int
    created_gte: Int
    created_in: [Int]
    created_lt: Int
    created_lte: Int
    id: String
    id_in: [String]
    ipfs: String
    ipfs_in: [String]
}

type Follow {
    created: Int!
    follower: String!
    id: String!
    ipfs: String
    space: Space!
}

input FollowWhere {
    created: Int
    created_gt: Int
    created_gte: Int
    created_in: [Int]
    created_lt: Int
    created_lte: Int
    follower: String
    follower_in: [String]
    id: String
    id_in: [String]
    ipfs: String
    ipfs_in: [String]
    space: String
    space_in: [String]
}

enum OrderDirection {
    asc, desc
}

type Proposal {
    author: String!
    body: String
    choices: [String]!
    created: Int!
    end: Int!
    id: String!
    ipfs: String
    link: String
    network: String!
    plugins: String!
    scores: [Float]
    scores_by_strategy: String
    scores_state: String
    scores_total: Float
    scores_updated: Int
    snapshot: String
    space: Space
    start: Int!
    state: String
    strategies: [Strategy]!
    title: String!
    type: String
    votes: Int
}

input ProposalWhere {
    author: String
    author_in: [String]
    created: Int
    created_gt: Int
    created_gte: Int
    created_in: [Int]
    created_lt: Int
    created_lte: Int
    end: Int
    end_gt: Int
    end_gte: Int
    end_in: [Int]
    end_lt: Int
    end_lte: Int
    id: String
    id_in: [String]
    ipfs: String
    ipfs_in: [String]
    network: String
    network_in: [String]
    scores_state: String
    scores_state_in: [String]
    space: String
    space_in: [String]
    start: Int
    start_gt: Int
    start_gte: Int
    start_in: [Int]
    start_lt: Int
    start_lte: Int
    state: String
    type: String
    type_in: [String]
}

type Query {
    aliases(first: Int, orderBy: String, orderDirection: OrderDirection, skip: Int, where: AliasWhere): [Alias]
    follows(first: Int, orderBy: String, orderDirection: OrderDirection, skip: Int, where: FollowWhere): [Follow]
    proposal(id: String): Proposal
    proposals(first: Int, orderBy: String, orderDirection: OrderDirection, skip: Int, where: ProposalWhere): [Proposal]
    space(id: String): Space
    spaces(first: Int, orderBy: String, orderDirection: OrderDirection, skip: Int, where: SpaceWhere): [Space]
    subscriptions(first: Int, orderBy: String, orderDirection: OrderDirection, skip: Int, where: SubscriptionWhere): [Subscription]
    vote(id: String): Vote
    votes(first: Int, orderBy: String, orderDirection: OrderDirection, skip: Int, where: VoteWhere): [Vote]
}

type Space {
    about: String
    admins: [String]
    avatar: String
    categories: [String]
    domain: String
    email: String
    filters: SpaceFilters
    github: String
    id: String!
    location: String
    members: [String]
    name: String
    network: String
    plugins: String
    private: Boolean
    skin: String
    strategies: [Strategy]
    symbol: String
    terms: String
    twitter: String
    validation: Strategy
    voting: SpaceVoting
    website: String
}

type SpaceFilters {
    minScore: Float
    onlyMembers: Boolean
}

type SpaceVoting {
    blind: Boolean
    delay: Int
    hideAbstain: Boolean
    period: Int
    quorum: Float
    type: String
}

input SpaceWhere {
    id: String
    id_in: [String]
}

type Strategy {
    name: String!
    params: String
}

type Subscription {
    address: String!
    created: Int!
    id: String!
    ipfs: String
    space: Space!
}

input SubscriptionWhere {
    address: String
    address_in: [String]
    created: Int
    created_gt: Int
    created_gte: Int
    created_in: [Int]
    created_lt: Int
    created_lte: Int
    id: String
    id_in: [String]
    ipfs: String
    ipfs_in: [String]
    space: String
    space_in: [String]
}

type Vote {
    choice: String!
    created: Int!
    id: String!
    ipfs: String
    metadata: String
    proposal: Proposal
    space: Space!
    voter: String!
    vp: Float
    vp_by_strategy: [Float]
    vp_state: String
}

input VoteWhere {
    created: Int
    created_gt: Int
    created_gte: Int
    created_in: [Int]
    created_lt: Int
    created_lte: Int
    id: String
    id_in: [String]
    ipfs: String
    ipfs_in: [String]
    proposal: String
    proposal_in: [String]
    space: String
    space_in: [String]
    voter: String
    voter_in: [String]
    vp: Float
    vp_gt: Float
    vp_gte: Float
    vp_in: [Float]
    vp_lt: Float
    vp_lte: Float
    vp_state: String
    vp_state_in: [String]
}